/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.th.koeln.archilab.fae.faeteam2service.api;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

import javax.validation.Valid;

import de.th.koeln.archilab.fae.faeteam2service.model.Positionssender;
import de.th.koeln.archilab.fae.faeteam2service.model.Zone;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-12-19T10:48:55.616846300+01:00[Europe/Berlin]")
@Api(value = "positionssender", description = "the positionssender API")
public interface PositionssenderApi {

    @ApiOperation(value = "Einen neuen Positionssender in die Datenbank aufnehmen", nickname = "addPositionssender", notes = "", response = Positionssender.class, tags = {"Positionssender",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Objekt wurde erstellt.", response = Positionssender.class),
            @ApiResponse(code = 405, message = "Invalide Daten.")})
    @RequestMapping(value = "/positionssender",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Positionssender> addPositionssender(@ApiParam(value = "Objekt, welches angelegt werden soll.", required = true) @Valid @RequestBody Positionssender body);


    @ApiOperation(value = "Liefert alle Positionssender.", nickname = "findAllPositionssender", notes = "", response = Positionssender.class, responseContainer = "List", tags = {"Positionssender",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Positionssender.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "ID ist nicht valide."),
            @ApiResponse(code = 404, message = "Positionssender konnte nicht gefunden werden.")})
    @RequestMapping(value = "/positionssender",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Positionssender>> findAllPositionssender(@ApiParam(value = "Ergebnis nach Zone filtern") @Valid @RequestParam(value = "zoneId", required = false) String zoneId);


    @ApiOperation(value = "Liefert den Positionssendermit der ID", nickname = "findPositionssender", notes = "", response = Positionssender.class, tags = {"Positionssender",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Positionssender.class),
            @ApiResponse(code = 400, message = "ID ist nicht valide."),
            @ApiResponse(code = 404, message = "Positionssender konnte nicht gefunden werden.")})
    @RequestMapping(value = "/positionssender/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Positionssender> findPositionssender(@ApiParam(value = "ID des Positionssender der zur√ºckgeliefert werden soll.", required = true) @PathVariable("id") String id);


    @ApiOperation(value = "Liefer alle Zonen des Positionssenders", nickname = "getZonenByPositionssenderId", notes = "Liefert alle Zonene des Positionssenders", response = Zone.class, responseContainer = "List", tags = {"Positionssender",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Zone.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Pet not found")})
    @RequestMapping(value = "/positionssender/{id}/zone",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Zone>> getZonenByPositionssenderId(@ApiParam(value = "ID des Positionssenders", required = true) @PathVariable("id") String id);


    @ApiOperation(value = "Daten eines Positionssenders aktualisieren", nickname = "updatePositionssender", notes = "", response = Positionssender.class, tags = {"Positionssender",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Objekt wurde aktualisiert.", response = Positionssender.class),
            @ApiResponse(code = 400, message = "Die ID ist nicht valide."),
            @ApiResponse(code = 404, message = "Objekt konnte nicht gefunden werden."),
            @ApiResponse(code = 405, message = "Validationsfehler")})
    @RequestMapping(value = "/positionssender/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Positionssender> updatePositionssender(@ApiParam(value = "Objekt eines Positionssenders, welches aktualisiert werden soll.", required = true) @Valid @RequestBody Positionssender body, @ApiParam(value = "ID des Positionssender der aktualisiert werden soll.", required = true) @PathVariable("id") String id);

}
